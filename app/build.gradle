public String capitalize(String a){
    String s = a.substring(1)
    return "${a[0].toUpperCase()}${s.toLowerCase()}"
}

rootProject.ext.properties.each { key, value ->
    if (!project.ext.has(key)) {
        project.ext.set(key, value)
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'android-power-assert'
apply plugin: 'robolectric'

android {
    compileSdkVersion 21
    buildToolsVersion '21.0.2'

    signingConfigs {
        release {
            storeFile file(project.properties.storeFile)
            storePassword project.properties.storePassword
            keyAlias project.properties.storeAlias
            keyPassword project.properties.keyPassword
        }
    }

    productFlavors {
        creation {
            applicationId 'circlebinder.creation'
        }
        playground {
            applicationId 'circlebinder.playground'
        }
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 21
        versionCode 13
        versionName '0.9'

        buildConfigField "String", "CRASH_REPORTER_KEY", "\"${project.properties.crashReporterKey}\""
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
            applicationIdSuffix ''
            versionNameSuffix ''
            zipAlignEnabled true
            shrinkResources true
        }

        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
    }

    lintOptions {
        abortOnError true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

robolectric {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'

    // Specify max number of test classes to execute in a test process
    // before restarting the process (default is unlimited)
    forkEvery = 150

    // configure whether failing tests should fail the build
    ignoreFailures true

    // use afterTest to listen to the test execution results
    afterTest { descriptor, result ->
        println "Executing test for ${descriptor.name} with result: ${result.resultType}"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'src/libs/', include: '*.jar')
    compile project(':vendor:android-sqlite-helper:sqlitehelper')
    compile 'am.ik.ltsv4j:ltsv4j:0.9.0'
    compile 'com.android.support:appcompat-v7:21.0.2'
    compile 'com.android.support:cardview-v7:21.0.0'
    compile 'com.crittercism:crittercism-android-agent:4.5.4'
    compile 'com.dmitriy-tarasov:android-intents:1.1.0'
    compile 'com.github.hotchemi:ProgressMenuItem:0.3.3'
    compile 'com.netflix.rxjava:rxjava-android:0.20.6'
    compile 'com.squareup.flow:flow:0.8'
    compile 'se.emilsjolander:stickylistheaders:2.5.0'
    androidTestCompile("junit:junit:4.10")
    androidTestCompile('org.robolectric:robolectric:2.4') {
        // https://github.com/robolectric/robolectric/issues/1175
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-plugin-registry'
        exclude module: 'maven-profile'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'nekohtml'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-http-shared'
        exclude module: 'wagon-provider-api'
        exclude group: 'com.android.support', module: 'support-v4'
    }
}

android.applicationVariants.all { variant ->
    def resourceDir = new File("app/src/${variant.buildType.name}/res/values")
    def resourceFile = new File(resourceDir, "_app.xml")
    def appName = project.properties.appName + variant.buildType.versionNameSuffix;

    resourceDir.mkdirs()
    writeResources(resourceFile, [
            "app_name": appName,
    ])
}

apply plugin: 'deploygate'

// アップロード時のメッセージは /app/DEPLOYGATE を利用している
deploygate {
    userName = project.properties.deployGateUserName
    token = project.properties.deployGateToken
}
def buildMessage = file("DEPLOYGATE").readLines()[0]
def apkDir = project.projectDir.getAbsolutePath() + "/build/outputs/apk"
android.applicationVariants.all { variant ->
    if (variant.buildType.name == "release") {
        def flavor = variant.productFlavors[0].name
        deploygate.apks {
            "${capitalize(flavor)}" {
                sourceFile = file("${apkDir}/app-${flavor}-${variant.buildType.name}.apk")
                message = buildMessage
            }
        }
        task("uploadDeployGate${capitalize(flavor)}Release").dependsOn ":app:assemble${capitalize(flavor)}Release"
    }
}

apply from: 'gradle/experimental-build.gradle'
